# City Service API - Complete Docker Compose Configuration
# Production-ready multi-service orchestration for FastAPI with PostgreSQL, Redis, and Kafka

version: '3.8'

services:
  # PostgreSQL Database - Primary data storage
  postgres:
    image: postgres:13
    container_name: city_service_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - city_service_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis Cache - LRU caching layer
  redis:
    image: redis:6-alpine
    container_name: city_service_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - city_service_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Apache Zookeeper - Kafka dependency
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: city_service_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - city_service_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Apache Kafka - Message streaming platform
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: city_service_kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    networks:
      - city_service_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Kafka UI - Web interface for Kafka monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: city_service_kafka_ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - city_service_network
    restart: unless-stopped

  # FastAPI Application - Main service
  app:
    build: .
    container_name: city_service_app
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/citydb
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=city_service_logs
    ports:
      - "8000:8000"
    volumes:
      # Mount CSV file for data loading
      - ./country-code.csv:/app/country-code.csv:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - city_service_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

# Persistent data volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network for service communication
networks:
  city_service_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
