# app/database.py

import asyncio
import logging
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, AsyncEngine
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text
from contextlib import asynccontextmanager
from typing import AsyncGenerator

from app.config import settings
from app.models import Base

logger = logging.getLogger(__name__)


class DatabaseManager:
    def __init__(self):
        self.engine: AsyncEngine = None
        self.session_factory: sessionmaker = None

    async def initialize(self):
        """Initialize database connection with retries for robustness."""
        max_retries = 5
        retry_delay = 5  # seconds

        for attempt in range(max_retries):
            try:
                logger.info(f"Database connection attempt {attempt + 1}/{max_retries}...")
                
                self.engine = create_async_engine(
                    settings.database_url,
                    echo=settings.debug,
                    pool_pre_ping=True
                )

                # Test connection and create tables
                async with self.engine.begin() as conn:
                    await conn.run_sync(Base.metadata.create_all)
                
                logger.info("Database initialized successfully.")
                return  # Exit the function on success

            except Exception as e:
                logger.warning(f"Database connection attempt {attempt + 1} failed: {e}")
                if self.engine:
                    await self.engine.dispose() # Dispose of the failed engine
                if attempt + 1 == max_retries:
                    logger.error("All database connection attempts failed. Application cannot start.")
                    raise
                logger.info(f"Retrying in {retry_delay} seconds...")
                await asyncio.sleep(retry_delay)

    async def close(self):
        """Close database connections."""
        if self.engine:
            await self.engine.dispose()
            logger.info("Database connections closed.")

    async def health_check(self) -> bool:
        """Check database health."""
        if not self.engine:
            return False
        try:
            async with self.engine.connect() as conn:
                result = await conn.execute(text("SELECT 1"))
                return result.scalar_one_or_none() == 1
        except Exception:
            return False

    @asynccontextmanager
    async def get_session(self) -> AsyncGenerator[AsyncSession, None]:
        """Get database session with proper cleanup."""
        if not self.session_factory:
             self.session_factory = sessionmaker(
                bind=self.engine, class_=AsyncSession, expire_on_commit=False
            )

        async with self.session_factory() as session:
            try:
                yield session
                await session.commit()
            except Exception as e:
                await session.rollback()
                logger.error(f"Database session error: {e}", exc_info=True)
                raise
            finally:
                await session.close()


# Global database manager instance
db_manager = DatabaseManager()


async def get_db() -> AsyncGenerator[AsyncSession, None]:
    """Dependency for getting database session."""
    async with db_manager.get_session() as session:
        yield session


async def init_db():
    """Initialize database."""
    await db_manager.initialize()


async def close_db():
    """Close database."""
    await db_manager.close()
