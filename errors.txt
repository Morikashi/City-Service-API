#!/bin/bash

# start.sh - Complete startup script for City Service API
# This script handles the entire project lifecycle

# Colors for better output
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[1;33m'
COLOR_RED='\033[0;31m'
COLOR_BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print formatted messages
info() {
    echo -e "${COLOR_GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${COLOR_YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${COLOR_RED}[ERROR]${NC} $1"
}

step() {
    echo -e "${COLOR_BLUE}[STEP]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    step "üîç Checking prerequisites..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    
    # Check if CSV file exists in root directory
    if [ ! -f "country-code.csv" ]; then
        error "CSV file 'country-code.csv' not found in project root directory!"
        error "Please place your CSV file (with columns: Country Code, City) in the same directory as this script."
        exit 1
    fi
    
    info "‚úì Prerequisites satisfied"
    info "‚úì CSV file found: country-code.csv"
}

# Clean up previous environment
cleanup_previous() {
    step "üßπ Cleaning up previous environment..."
    
    if [ "$(docker-compose ps -q)" ]; then
        info "Stopping existing containers..."
        docker-compose down -v --remove-orphans
        info "‚úì Previous environment cleaned"
    else
        info "‚úì No previous environment to clean"
    fi
}

# Build and start services
start_services() {
    step "üöÄ Building and starting all services..."
    
    info "Building Docker images..."
    docker-compose build --no-cache
    
    info "Starting services in background..."
    docker-compose up -d
    
    if [ $? -ne 0 ]; then
        error "‚ùå Failed to start services"
        exit 1
    fi
    
    info "‚úì All services starting..."
}

# Wait for PostgreSQL to be ready
wait_for_postgres() {
    step "‚è≥ Waiting for PostgreSQL..."
    
    local counter=0
    local max_attempts=30
    
    while ! docker exec city_service_postgres pg_isready -U postgres -q; do
        if [ $counter -ge $max_attempts ]; then
            error "‚ùå PostgreSQL failed to start within 60 seconds"
            docker-compose logs postgres
            exit 1
        fi
        counter=$((counter+1))
        printf "."
        sleep 2
    done
    
    echo ""
    info "‚úì PostgreSQL is ready"
}

# Wait for Redis to be ready
wait_for_redis() {
    step "‚è≥ Waiting for Redis..."
    
    local counter=0
    local max_attempts=30
    
    while ! docker exec city_service_redis redis-cli ping | grep -q PONG; do
        if [ $counter -ge $max_attempts ]; then
            error "‚ùå Redis failed to start within 60 seconds"
            docker-compose logs redis
            exit 1
        fi
        counter=$((counter+1))
        printf "."
        sleep 2
    done
    
    echo ""
    info "‚úì Redis is ready"
}

# Wait for Kafka to be ready
wait_for_kafka() {
    step "‚è≥ Waiting for Kafka..."
    
    local counter=0
    local max_attempts=45
    
    while ! docker-compose exec -T kafka kafka-topics --bootstrap-server localhost:9092 --list &>/dev/null; do
        if [ $counter -ge $max_attempts ]; then
            error "‚ùå Kafka failed to start within 90 seconds"
            docker-compose logs kafka
            exit 1
        fi
        counter=$((counter+1))
        printf "."
        sleep 2
    done
    
    echo ""
    info "‚úì Kafka is ready"
}

# Create Kafka topic
create_kafka_topic() {
    step "üìù Creating Kafka topic..."
    
    # Check if topic already exists
    if docker-compose exec -T kafka kafka-topics --bootstrap-server localhost:9092 --list | grep -q "city_service_logs"; then
        info "‚úì Kafka topic 'city_service_logs' already exists"
    else
        info "Creating Kafka topic 'city_service_logs'..."
        docker-compose exec -T kafka kafka-topics \
            --bootstrap-server localhost:9092 \
            --create \
            --topic city_service_logs \
            --partitions 1 \
            --replication-factor 1 \
            --config retention.ms=604800000
        
        if [ $? -eq 0 ]; then
            info "‚úì Kafka topic created successfully"
        else
            warn "‚ö†Ô∏è  Failed to create Kafka topic, but continuing..."
        fi
    fi
}

# Wait for FastAPI application to be healthy
wait_for_app() {
    step "‚è≥ Waiting for FastAPI application..."
    
    local counter=0
    local max_attempts=30
    
    while ! curl -sf -o /dev/null http://localhost:8000/health; do
        if [ $counter -ge $max_attempts ]; then
            error "‚ùå FastAPI application failed to start within 60 seconds"
            error "Check logs with: docker-compose logs app"
            exit 1
        fi
        counter=$((counter+1))
        printf "."
        sleep 2
    done
    
    echo ""
    info "‚úì FastAPI application is healthy"
}

# Load CSV data into database
load_csv_data() {
    step "üìä Loading CSV data into database..."
    
    info "Loading country-code.csv via load_csv_data.py script..."
    # Fixed: Use -m flag to run as module to avoid import issues
    docker-compose exec -T app python -m scripts.load_csv_data
    
    if [ $? -eq 0 ]; then
        info "‚úì CSV data loaded successfully"
    else
        error "‚ùå Failed to load CSV data"
        error "Check the output above for details"
        exit 1
    fi
}

# Run comprehensive tests
run_tests() {
    step "üß™ Running comprehensive API tests..."
    
    info "Executing test suite inside container..."
    # Fixed: Use -m flag to run as module to avoid import issues
    docker-compose exec -T app python -m scripts.test_api
    
    if [ $? -eq 0 ]; then
        info "‚úì All tests passed successfully"
    else
        error "‚ùå Some tests failed"
        error "Check the test output above for details"
        exit 1
    fi
}

# Display final information
show_access_info() {
    step "üéâ Application is ready!"
    
    echo ""
    echo "========================================================="
    echo "           üöÄ CITY SERVICE API IS RUNNING! üöÄ"
    echo "========================================================="
    echo ""
    echo "üìö API Documentation:    http://localhost:8000/docs"
    echo "‚ù§Ô∏è  Health Check:        http://localhost:8000/health"
    echo "üìä Kafka UI:             http://localhost:8080"
    echo "üìù Application Info:     http://localhost:8000/info"
    echo ""
    echo "üîß Management Commands:"
    echo "   View logs:            docker-compose logs -f"
    echo "   View app logs only:   docker-compose logs -f app"
    echo "   Stop services:        docker-compose down"
    echo "   Restart services:     docker-compose restart"
    echo ""
    echo "üóÑÔ∏è  Database Access:"
    echo "   PostgreSQL:           psql -h localhost -U postgres -d citydb"
    echo "   Redis CLI:            redis-cli -h localhost -p 6379"
    echo ""
    echo "üìã Example API Calls:"
    echo "   Create city:          curl -X POST http://localhost:8000/api/v1/cities/ -H 'Content-Type: application/json' -d '{\"name\":\"TestCity\",\"country_code\":\"TC\"}'"
    echo "   Get country code:     curl http://localhost:8000/api/v1/cities/SanDiego/country-code"
    echo "   List cities:          curl http://localhost:8000/api/v1/cities/"
    echo "   Get metrics:          curl http://localhost:8000/api/v1/cities/metrics"
    echo ""
    echo "========================================================="
    echo "‚ú® Your City Service API is fully operational!"
    echo "========================================================="
}

# Main execution flow
main() {
    echo "üåü City Service API - Complete Startup Script"
    echo "=============================================="
    
    # Execute all steps in order
    check_prerequisites
    cleanup_previous
    start_services
    wait_for_postgres
    wait_for_redis
    wait_for_kafka
    create_kafka_topic
    wait_for_app
    load_csv_data
    run_tests
    show_access_info
    
    info "üéØ Startup completed successfully!"
}

# Error handling
set -e
trap 'error "‚ùå Script failed on line $LINENO"' ERR

# Run main function
main "$@"
